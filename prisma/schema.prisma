// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  notes       Note[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]

  bands UserBand[]

  blackoutDates BlackoutDate[]
  Invitation    Invitation[]

  @@index([id])
}

model BlackoutDate {
  id     String   @id @default(cuid())
  date   DateTime
  reason String?
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
}

model Invitation {
  id        String   @id @default(cuid())
  inviterId String
  inviteeId String
  bandId    String
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  invitee User @relation(fields: [inviteeId], references: [id], onDelete: Cascade)
  band    Band @relation(fields: [bandId], references: [id], onDelete: Cascade)

  @@index([inviterId])
  @@index([inviteeId])
  @@index([bandId])
}

model BandVenue {
  bandId  String
  venueId String
  band    Band   @relation(fields: [bandId], references: [id], onDelete: Cascade)
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@id([bandId, venueId])
}

model VenueContact {
  id String @id @default(cuid())

  phone String?
  email String?
  name  String

  isPrimary Boolean?
  status    String?

  venueId String
  venue   Venue  @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@index([venueId])
}

model Venue {
  id       String         @id @default(cuid())
  name     String
  location String
  capacity Int?
  bands    BandVenue[]
  events   Event[]
  contacts VenueContact[]

  @@index([id])
}

model Event {
  id        String      @id @default(cuid())
  name      String
  date      DateTime
  location  String?
  bands     BandEvent[]
  venueId   String?
  venue     Venue?      @relation(fields: [venueId], references: [id], onDelete: Cascade)
  setlistId String?
  setlist   Setlist?    @relation(fields: [setlistId], references: [id], onDelete: SetNull)
  payment   Int?

  @@index([id])
}

model BandEvent {
  bandId  String
  eventId String
  band    Band   @relation(fields: [bandId], references: [id], onDelete: Cascade)
  event   Event  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@id([bandId, eventId])
}

model Band {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  members    UserBand[]
  songs      BandSong[]
  venues     BandVenue[]
  events     BandEvent[]
  setlists   BandSetlist[]
  Invitation Invitation[]

  @@index([id])
}

model BandSong {
  bandId String
  songId String
  band   Band   @relation(fields: [bandId], references: [id], onDelete: Cascade)
  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@id([bandId, songId])
}

model Song {
  id     String @id @default(cuid())
  artist String
  title  String

  youtubeUrl String?
  rating     Int?
  status     String?
  key        String?

  bandSongs BandSong[]
  bandId    String?
  SetSong   SetSong[]
  lyrics    SongLyrics?
}

model SongLyrics {
  id          String @id @default(cuid())
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  songId String @unique

  @@index([songId])
}

model UserBand {
  userId     String
  bandId     String
  isAdmin    Boolean @default(false)
  instrument String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  band Band @relation(fields: [bandId], references: [id], onDelete: Cascade)

  @@id([userId, bandId])
}

model BandSetlist {
  bandId    String
  setlistId String
  band      Band    @relation(fields: [bandId], references: [id], onDelete: Cascade)
  setlist   Setlist @relation(fields: [setlistId], references: [id], onDelete: Cascade)
  notes     String?

  @@id([bandId, setlistId])
}

model Setlist {
  id          String        @id @default(cuid())
  name        String
  sets        Set[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  BandSetlist BandSetlist[]
  events      Event[]
}

model Set {
  id        String    @id @default(cuid())
  name      String
  setlistId String
  setlist   Setlist   @relation(fields: [setlistId], references: [id], onDelete: Cascade)
  setSongs  SetSong[]
  order     Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SetSong {
  id     String @id @default(cuid())
  setId  String
  songId String
  order  Int

  set  Set  @relation(fields: [setId], references: [id], onDelete: Cascade)
  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([setId, order])
  @@unique([setId, songId])
}

// ############
// Other models
// ############

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}
